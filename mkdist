#!/bin/ksh
#
# flashrd mkdist
#
# flip openbsd distribution into vnd and tars for mounting on flash boot
#
# Chris Cappuccio <chris@nmedia.net>
#

if [ -z "$vnddirs" ]; then
 echo vnddirs not specified, aborting
 exit 1
fi
if [ -z "$device" ]; then
 device=vnd0
fi

if [ -z "$1" -a -z "$distloc" ]; then
 echo "% mkdist <openbsd base>"
 exit 1
fi

if [ -z "$distloc" ]; then
 distloc=$1
 shift
fi

if [ ! -d "$distloc" ]; then
 echo % $distloc is not a directory
 exit 1
else
 if [ ! -f "$distloc"/etc/services ]; then
  echo % $distloc does not contain an unpacked etcXX.tgz file
  exit 1
 fi
 if [ ! -f "$distloc"/bin/ksh ]; then
  echo % $distloc does not contain an unpacked baseXX.tgz file
  exit 1
 fi
 if [ ! -u "$distloc"/usr/bin/passwd ]; then
  echo "% $distloc was not unpacked with tar p flag (to preserve permissions),"
  echo "or it was not unpacked as root (to allow set ownership)"
  exit 1
 fi
fi

if [ ! -z "$vndsize" ]; then
 # build vndsizeA array from $vndsize
 x=0
 for i in $vndsize; do
  vndsizeA[$x]=$i
  ((x++))
 done
fi

y=0
for i in $vnddirs; do
 if [ ! -d $distloc/$i ]; then
  echo % Directory $distloc/$i not found
  exit 1
 fi
 ((y++))
done

if [ $y -ne $x ]; then
 echo "% \$vnddirs count ($y) different than \$vndsize count ($x), aborting"
 exit 1
fi

if [ ! -z "tardirs" ]; then
 for i in $tardirs; do
  if [ ! -d $distloc/$i ]; then
   echo % Directory $distloc/$i not found
   exit 1
  fi
 done
fi

# Relocate resolv.conf from /etc to /var/db to allow updates by dhclient
# It doesn't exist in a fresh set, but check in case it was pre-populated
if [ -f ${distloc}/etc/resolv.conf ]; then
  mv ${distloc}/etc/resolv.conf ${distloc}/var/db
fi
ln -s /var/db/resolv.conf ${distloc}/etc

###
#
# disktab dance

if [[ ! -w /etc ]]; then
 echo "Can't do it, depends on disktab being replaceable!"
 exit 1
fi

random=`dd if=/dev/urandom bs=512 count=1 2>/dev/null | sha512`
tabname=`printf "%.8s" $random`

###
#
# fall back

2() {
 umount -f $tmpmntdir
}
1() {
 vnconfig -u $device
}
0() {
 [[ -f /etc/disktab.${tabname} ]] && mv /etc/disktab.${tabname} /etc/disktab
 exit 1
}

. ./flashrd.sub

tmplabel=$(c 0 mktemp -t mkdistlabel.XXXXXX)
tmpmntdir=$(c 0 mktemp -t -d mkdist.XXXXXX)
[ -z "$tmpmnt" ] && tmpmnt=$(c 0 mktemp -t -d vnd.XXXXXX)

###
#
# Determine sizes for partitions

set -A part a d e f g h i j k l m n o p
disktotal=0
x=0

bytessec=512

# In the future, we may create an image with larger blocks.
factor=$((bytessec / 512))

for i in $vnddirs; do

 echo -n Analyzing /$i

 set -- $(du -s $distloc/$i)
 size=$1

 # du outputs 512 byte blocks
 [[ $factor -gt 1 ]] && ((size /= factor))

 # Leave 1/2th (50%) of used space as free space for >=100MB directories
 free=$((size/2))
 total[$x]=$((size+free))
 # and double time for <100MB directories
 if [ ${size} -le `mbytes2sectors 100` ]; then
  ((total[$x]*=2))
 fi

 if [ ${vndsizeA[$x]} != "auto" ]; then
  if [ ${total[$x]} -le `mbytes2sectors ${vndsizeA[$x]}` ]; then
   total[$x]=`mbytes2sectors ${vndsizeA[$x]}`
  else
   # Auto-calculated size was more than suggested size.  Go with auto-calculation.
   echo -n " (OVERRIDE ${vndsizeA[$x]}MB)"
  fi
 fi
 # report results
 echo " fs `sectors2mbytes ${total[$x]}`MB (`sectors2mbytes $size`MB files `sectors2mbytes $((total[$x] - size))`MB free)"
 disktotal=$((disktotal+total[$x]))
 ((x++))

done

###
#
# Setup openbsd.vnd with a little bit of zeros

echo -n "Size openbsd.vnd `sectors2mbytes $disktotal`MB "
c 0 "dd if=/dev/zero of=$tmpmnt/openbsd.vnd bs=512 count=512 > $TMPDIR/last.output 2>&1"
echo

sectorstrack=64
trackscylinder=1
cylinders=$((disktotal / sectorstrack))

###
#
# Generate openbsd.vnd disktab

echo "vnd-${tabname}:\\" > $tmplabel
echo "	:dt=SCSI:ty=${tabname}:se#${bytessec}:nt#${trackscylinder}:ns#${sectorstrack}:nc#${cylinders}:su#${disktotal}:\\" >> $tmplabel

x=0
offset=64
((total[0] -= offset))

for i in $vnddirs; do

 e="${part[$x]}"

 echo "	:p${e}#${total[$x]}:o${e}#${offset}:f${e}#$((bytessec * 2)):b${e}#$((bytessec * 16)):t${e}=4.2BSD:\\" >> $tmplabel

 offset=$((offset+${total[$x]}))
 ((x++))
done

echo "	:pc#${disktotal}:oc#0:" >> $tmplabel

# DISKTAB MODIFIED
c 0 mv /etc/disktab /etc/disktab.${tabname}

c 0 cp $tmplabel /etc/disktab
c 0 cp $tmplabel $TMPDIR/vnd.disktab

c 0 vnconfig -t vnd-${tabname} $device $tmpmnt/openbsd.vnd

c 1 "disklabel -w $device vnd-${tabname} > $TMPDIR/last.output 2>&1"

# DISKTAB ORIGINAL
c 1 mv /etc/disktab.${tabname} /etc/disktab

###
#
# newfs, copy

x=0

for i in $vnddirs; do
 echo -n Finalizing /$i

 echo -n " newfs"
 c 1 "newfs -m 1 -o space /dev/r${device}${part[$x]} > $TMPDIR/last.output 2>&1"

 c 1 mount /dev/${device}${part[$x]} $tmpmntdir

 echo -n " copy"
 c 2 tar cf - -C $distloc/$i . | tar xpf - -C $tmpmntdir

 umountwait 1 $tmpmntdir

 echo
 ((x++))
done

c 0 vnconfig -u $device

###
#
# TAR loop

if [ ! -z "$tardirs" ]; then
 for i in $tardirs; do
  echo -n Creating $i.tar

  set -- `du -s $distloc/$i`
  size=$1
  if [ `sectors2mbytes $size` -ge 1 ]; then
   echo -n " `sectors2mbytes $size`"MB files
  else
   echo -n " $((size)) sectors of files ($bytessec bytes/sector)"
  fi

  echo -n " copy"
  c 0 tar cf $tmpmnt/$i.tar -C $distloc/$i .

  echo
 done
fi

###
#
# Install onetime.tgz file

if [ -f onetime.tgz ]; then
 echo 'Installing onetime.tgz'
 c 0 cp onetime.tgz $tmpmnt
fi
