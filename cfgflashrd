#!/bin/ksh
#
# flashrd image configurator
#
# Chris Cappuccio <chris@nmedia.net>

typeset -x TMPDIR

# include vnddirs
. ./etc/rc.flashrd.sub


set -A part a d e f g h i j k l m n o p

usage() {
 cat <<EOF
Usage: cfgflashrd [-d "dev" | -i "filename"]  [options]

Use one of:
    -d | -disk "dev"        Configure an attached disk
    -i | -image "filename"  Configure an image
Options:
    -r "filename"       rdrootfs image (needed only to change ramdisk).
    -e "dir"            Directory where elfrdsetroot.c is located (only with -r).
    -c "speed"          Set com0 as console at speed "speed".
    -m                  Set bsd.mp as primary kernel.
    -o "onetime.tgz"    Install specified file on the flash as onetime.tgz.
    -s                  Set bsd.sp as primary kernel.
    -t "tzfile"         Set timezone using a timezone file from
                        /usr/share/zoneinfo
    -k "keyboard"       Configure alternative keyboard encoding.
    -dns "dns server"   List of DNS servers (separated by spaces).
    -no-dns             Don't configure DNS settings.
    -ntp "ntp servers"  List of NTP servers (separated by spaces).
    -no-ntp             Don't configure NTP settings 
    -hostname "name"    Hostname of target host. Will prompt to enter hostname if
                        not supplied.
    -no-hostname        Don't configure a hostname.
    -encpass "string"   Encrypted password to use for the root account. See
                        encrypt(1). Will prompt to enter password if not supplied.

EOF
}

if [[ "$#" -lt 1 ]]; then
 usage
 exit 1
fi

. ./flashrd.sub

[ `id -u` != 0 ] && echo root required && exit 1

getavailvnd 2
device=${vndevices[0]}
rootvnd=${vndevices[1]}

while :
do
 case $1 in
  -\?)		usage; exit 0;;
  -d|-disk)	t2 "$2"; disk="$2"; shift 2;;
  -i|-image)	t2 "$2"; image="$2"; shift 2;;
  -r|-rdroot)	t2 "$2"; rdfs="$2"; shift 2;;
  -c|-com0)	t2 "$2"; com0="$2"; shift 2;;
  -m|-mp)	kernel="bsdmp"; shift;;
  -o|-onetime)	t2 "$2"; onetime="$2"; shift 2;;
  -s|-sp)	kernel="bsdsp"; shift;;
  -t|-tz)	t2 "$2"; tzfile="$2"; shift 2;;
  -dns)		t2 "$2"; dnsservers="$2"; shift 2;;
  -no-dns)	nodns="1"; shift;;
  -ntp)		t2 "$2"; ntpservers="$2"; shift 2;;
  -no-ntp)	nontp="1"; shift;;
  -hostname)	t2 "$2"; hostname="$2"; shift 2;;
  -no-hostname)	nohostname="1"; shift;;
  -encpass)	t2 "$2"; encpass="$2"; shift 2;;
  -e)		t2 "$2"; elfrdsetrootdir="$2"; shift 2;;
  -k)		t2 "$2"; keyboardencoding="$2"; shift 2;;

  --)		shift; break;;
  -*)		usage; exit 1;;
  *)		break;;
 esac
done

# checking arguments

if [[ nodns == "1" && -n $dnsservers ]]; then
 echo "Option -dns is not valid in conjunction with -no-dns"
 exit 1
fi

if [[ $nontp == "1" && -n $ntpservers ]]; then
 echo "Option -ntp is not valid in conjunction with -no-ntp"
 exit 1
fi

if [[ $nohostname == "1" && -n $hostname ]]; then
 echo "Option -hostname not valid in conjunction with -no-hostname"
 exit 1
fi

if [[ -n $elfrdsetrootdir && -z $rdfs ]]; then
 echo "Option -e only valid in conjunction with -r"
 exit 1
fi

if [[ -n $disk && -n $image ]]; then
 echo "Choose either -d or -i, not both"
 exit 1
fi

if [[ -z $disk && -z $image ]]; then
 echo "Must choose either -d or -i"
 exit 1
fi

if [[ -n $disk ]]; then
 if [[ ! -b /dev/${disk}a ]]; then
  echo "Device /dev/${disk}a not found"
  exit 1
 fi
 vnd=false
 rootdevice=/dev/${disk}a
fi

if [[ -n $image ]]; then
 if [[ ! -f $image ]]; then
  echo "Sorry flashimg $image not found"
  exit 1
 fi
 vnd=true
 rootdevice=/dev/${rootvnd}a
fi

if [[ -n $rdfs && ! -f $rdfs ]]; then
 echo "Sorry rdroot $rdfs not found"
 exit 1
fi

if [[ -n $com0 && ( $com0 -lt 1200 || $com0 -gt 115200 ) ]]; then
 echo "Sorry the com0 speed $com0 is unlikely"
 exit 1
fi

if [[ -n $tzfile ]]; then
 if [[ ! -f $tzfile ]]; then
  tzfile=/usr/share/zoneinfo/$tzfile
 elif [[ ! -f $tzfile ]]; then
  echo "Timezone file not found"
  exit 1
 fi
fi

if [ -z "$elfrdsetrootdir" ]; then
 elfrdsetrootdir=./elfrdsetroot/
fi

if [ ! -d $elfrdsetrootdir ]; then
 echo % elfrdsetroodir $elfrdsetrootdir not found
fi

vncfgroot() {
 [[ $vnd == true ]] && c 0 vnconfig ${rootvnd} $1
}

vnuncfgroot() {
 [[ $vnd == true ]] && c 0 vnconfig -u ${rootvnd}
}

###
#
# Check if provided keyboard encoding seems viable based on what exists on the
# current machine

testkeyboardencoding() {
 if [ ! -z $keyboardencoding ]; then
    found=`/sbin/kbd -l | grep $keyboardencoding | wc -l`
    if [ $found -eq 0 ]; then
        echo "WARNING: The keyboard encoding \"$keyboardencoding\" does not exist on your machine."
        echo "You'll need to set it manually on the targetted machine via the wsconsctl command if"
        echo "this is a new encoding."
        return 1
    fi
 fi
}

###
#
# fall back

4() {
 umount -f $tmpmntvnd
}
3() {
 vnconfig -u $device
}
2() {
 umount -f $tmpmnt
}
1() {
 vnuncfgroot
}
0() {
 echo % TMPDIR: $TMPDIR
 exit 1
}

###
#
# (Re-)Base TMPDIR to a subdiretory of either the current
# TMPDIR value, or to /tmp

TMPDIR=$(c 0 mktemp -t -d cfgflashrd.XXXXXX)

tmpmnt=$TMPDIR/tmpmnt		# vnd/disk mount point
c 1 mkdir $tmpmnt
tmpmntvnd=$TMPDIR/tmpmntvnd	# openbsd.vnd partition mount point
c 1 mkdir $tmpmntvnd

###
#
# mount vnd or disk

vncfgroot $image

c 1 fsck -p ${rootdevice}

c 1 mount ${rootdevice} $tmpmnt

if [ ! -z "$rdfs" ]; then
 ###
 #
 # compile ELFRDSETROOT

 c 2 cc -o $elfrdsetrootdir/elfrdsetroot $elfrdsetrootdir/elfrdsetroot.c $elfrdsetrootdir/elf32.c $elfrdsetrootdir/elf64.c

 c 2 vnconfig $device $rdfs

 c 3 fsck -p /dev/${device}a

 c 3 mount /dev/${device}a $tmpmntvnd

 cholo=`egrep ^disk= $tmpmntvnd/stand/rc`
 if [ -z "$cholo" ]; then
  echo % no disk= line found in $tmpmntvnd/stand/rc, aborting
  4; 3; 2; 1; 0;
 fi

 ch1=${cholo#disk=}
 if [ ${ch1} != "auto" ]; then
  ch1=${ch1%a}
 fi
 echo Current image device ${ch1}

 getphys()
 {
  read phys?"New physical device name (as seen by destination system)[${ch1}]? "
  if [ -z ${phys} ]; then
   phys=$ch1
  fi
  if [ ! -b /dev/${phys}a -a ${phys} != "auto" ]; then
   echo /dev/${phys}a appear to be nonsense, try again
   getphys
  fi
 }
 getphys
 if [ ${phys} != "auto" ]; then
  phys=${phys}a
 fi

 temp=$(c 4 mktemp -t cfgflashrd.XXXXXX)
 c 4 "sed -e 's/$cholo/disk=${phys}/' < $tmpmntvnd/stand/rc > $temp"

 c 4 mv $temp $tmpmntvnd/stand/rc

 c 3 umount $tmpmntvnd

 c 2 vnconfig -u $device

 echo Setting ramdisk root image

 for i in bsd bsd.mp bsd.sp; do
  if [ -f $tmpmnt/$i ]; then
   c 2 $elfrdsetrootdir/elfrdsetroot $tmpmnt/$i $rdfs
   cfgbsd=1
  fi
 done
 c 2 rm $elfrdsetrootdir/elfrdsetroot

 if [ -z "$cfgbsd" ]; then
  echo % none of bsd bsd.mp bsd.sp kernel found at flash image.  how odd?
  2; 1; 0;
 fi

 if [ "$kernel" == "bsdsp" ]; then
  if [ -f $tmpmnt/bsd.sp ]; then
   mv $tmpmnt/bsd $tmpmnt/bsd.mp
   mv $tmpmnt/bsd.sp $tmpmnt/bsd
  else
   echo "[bsd.sp not found, primary kernel may already be single processor]"
  fi
 fi

 if [ "$kernel" == "bsdmp" ]; then
  if [ -f $tmpmnt/bsd.mp ]; then
   mv $tmpmnt/bsd $tmpmnt/bsd.sp
   mv $tmpmnt/bsd.mp $tmpmnt/bsd
  else
   echo "[bsd.mp not found, primary kernel may already by multi-processor]"
  fi
 fi

 rm -f $temp
fi

if [ ! -z "$com0" ]; then
 echo Installing boot.conf for com0 at $com0 baud
 mkdir -p $tmpmnt/etc
 cat <<-EOF >$tmpmnt/etc/boot.conf
	stty com0 $com0
	set tty com0
	EOF
fi

###
#
# install the onetime.tgz file
if [ ! -z "$onetime" -a -f "$onetime" ]; then
 echo Installing "$onetime" file
 cp "$onetime" $tmpmnt/onetime.tgz
fi

###
#
# mount running filesystem for other types of changes

c 2 vnconfig $device $tmpmnt/openbsd.vnd

###
#
# map $vnddirs etc to a partition label, mount

x=0
for i in $vnddirs; do
 if [ $i == etc ]; then
  etcpart=${part[$x]}
 fi
 (( x++ ))
done

if [ -z "$etcpart" ]; then
 echo "% missing etc in \$vnddirs ($vnddirs) aborting"
 3; 2; 1; 0;
fi

c 3 fsck -p /dev/$device$etcpart

c 3 mount /dev/$device$etcpart $tmpmntvnd

if [ ! -f $tmpmntvnd/.flashrd_version ]; then
 echo % missing etc/.flashrd_version, not flashrd image or \$vnddirs out of sync? what funky?
else
 echo % image flashrd_version $(cat $tmpmntvnd/.flashrd_version)
fi

if [ ! -z "$com0" ]; then
 tmpttys=$TMPDIR/tmpttys
 echo Modifying /etc/ttys for tty00 at $com0 baud
 # Turn off ttyC consoles, turn on com0
 # partially gleaned from install.sub
 sed	-e "/^tty00/s/std.[0-9]*/std.${com0}/"	\
	-e "/^tty00/s/unknown/vt220	/"	\
	-e "/^tty00/s/off.*/on secure/"		\
	-e "/^ttyC/s/on.*secure/off/" $tmpmntvnd/ttys > $tmpttys
 c 4 mv $tmpttys $tmpmntvnd/ttys
fi

###
#
# set hostname

getname()
{
 read hostname?"Hostname: "
 if [ -z "$hostname" ]; then
  echo "Nothing entered? Try again."
  getname
 fi
}

if [[ $nohostname != "1" ]]; then

 if [ -z "$hostname" ]; then
  echo
  echo Please assign a system hostname...
  getname
 fi
 
 echo $hostname > $tmpmntvnd/myname
fi

###
#
# set root password

getpass()
{
 stty -echo
 read pw1?"Password:"
 echo
 read pw2?"Verify:"
 echo
 stty echo

 if [ "$pw1" == "$pw2" ]; then
  password="$pw1"
 fi
 if [ -z "$password" ]; then
  echo "Passwords don't match or password was empty.  Try again."
  getpass
 fi
}

if [ -z "$encpass" ]; then
 if [ -z "$password" ]; then
  echo
  echo Please assign a root password...
  getpass
  echo
 fi
fi

if [ -z "$encpass" ]; then
 encpass=`echo $password | /usr/bin/encrypt -b 8`
fi

tmppass=$TMPDIR/tmppass
awk -v encpass=$encpass -F : '{
  if (/^root/){
    printf("%s:%s:%s:%s:%s:%s:%s:%s:%s:%s\n",
         $1, encpass, $3, $4, $5, $6, $7, $8, $9, $10)
  } else {print}}' $tmpmntvnd/master.passwd >> $tmppass

if [[ $? -eq 0 ]]; then
    c 4 mv $tmppass $tmpmntvnd/master.passwd
    c 4 pwd_mkdb -p -d $tmpmntvnd $tmpmntvnd/master.passwd
fi

###
#
# steal ntp servers from local ntpd.conf!

if [[ -f $tmpmntvnd/ntpd.conf && $nontp != "1" ]]; then
 if [ -z "$ntpservers" ]; then
  ntpservers=`awk 'BEGIN {ORS=" "} /^server/{print $2}' /etc/ntpd.conf`
  read nntpservers?"NTP Servers: [$ntpservers] "
  if [ ! -z "$nntpservers" ]; then
   ntpservers="$nntpservers"
  fi
 fi

 if [ ! -z "$ntpservers" ]; then
  echo Configuring ntpd.conf for NTP servers $ntpservers
   egrep -v ^server $tmpmntvnd/ntpd.conf > $tmppass
   for i in $ntpservers; do
     c 4 "echo servers $i >> $tmppass"
   done
   c 4 mv $tmppass $tmpmntvnd/ntpd.conf
 fi
fi

###
#
# steal dns servers from local resolv.conf!

if [[ $nodns != "1" ]]; then
 if [ -z "$dnsservers" ]; then
  dnsservers=`awk 'BEGIN {ORS=" "} /^nameserver/{print $2}' /etc/resolv.conf`
  read ndnsservers?"DNS Servers: [$dnsservers] "
  if [ ! -z "$ndnsservers" ]; then
   dnsservers="$ndnsservers"
  fi
 fi

 if [ ! -z "$dnsservers" ]; then
  echo Configuring resolv.conf for DNS servers $dnsservers
  resolv=$TMPDIR/resolv.conf
  c 4 "echo lookup file bind > ${resolv}"
  for i in $dnsservers; do
   c 4 "echo nameserver $i >> ${resolv}"
  done
  if [ -f $tmpmnt/var.tar ]; then
   c 4 mkdir $TMPDIR/var-copy
   c 4 tar xpf $tmpmnt/var.tar -C $TMPDIR/var-copy
   c 4 mkdir -p $TMPDIR/var-copy/db
   c 4 mv ${resolv} $TMPDIR/var-copy/db/resolv.conf
   c 4 tar cf $tmpmnt/var.tar -C $TMPDIR/var-copy .
  else
   c 4 mv ${resolv} ${tmpmntvnd}/resolv.conf
  fi
 else
  echo Failed to configure nameservers, you must manually configure /etc/resolv.conf
 fi
fi

###
#
# tzfile

if [ ! -z "$tzfile" -a -f "$tzfile" ]; then
 c 4 rm $tmpmntvnd/localtime
 c 4 cp $tzfile $tmpmntvnd/localtime
fi

###
#
# set keyboard encoding (optional)

if [ -z "$keyboardencoding" ]; then
  read keyboardencoding?"Keyboard encoding: [default] "
fi

if [ ! -z "$keyboardencoding" ]; then
 testkeyboardencoding
 if [ $? == 0 ]; then
  sed -e "s:.*keyboard.encoding.*:keyboard.encoding=$keyboardencoding            # use different keyboard encoding:" < $tmpmntvnd/examples/wsconsctl.conf >> $TMPDIR/tmpwsconsctl
  c 4 mv $TMPDIR/tmpwsconsctl $tmpmntvnd/wsconsctl.conf
 fi
fi

###
#
# this is the end

c 3 umount $tmpmntvnd

###
#
# done with the main disk vnd

c 2 vnconfig -u $device

c 1 umount $tmpmnt

###
#
# done with flash img vnd

vnuncfgroot

rm -r $TMPDIR

echo Done
